
# Copyright 2021 Ant Group Co., Ltd.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


load("//bazel:ppu.bzl", "ppu_cc_binary", "ppu_cc_library", "ppu_cc_test")
load("@rules_proto//proto:defs.bzl", "proto_library")
load("@rules_cc//cc:defs.bzl", "cc_proto_library")

package(default_visibility = ["//visibility:public"])

ppu_cc_library(
    name = "ecdh_psi",
    srcs = ["ecdh_psi.cc"],
    hdrs = ["ecdh_psi.h"],
    deps = [
        ":serializable_cc_proto",
        "//ppu/link",
        "//ppu/psi/cryptor:cryptor_selector",
        "//ppu/psi/provider",
        "//ppu/psi/store",
        "//ppu/utils:parallel",
        "@com_google_absl//absl/strings",
    ],
)

ppu_cc_test(
    name = "ecdh_psi_test",
    srcs = ["ecdh_psi_test.cc"],
    deps = [
        ":ecdh_psi",
    ],
)

ppu_cc_binary(
    name = "ecdh_psi_bench",
    srcs = ["ecdh_psi_bench.cc"],
    deps = [
        ":ecdh_psi",
        "@com_github_google_benchmark//:benchmark_main",
    ],
)

ppu_cc_library(
    name = "cuckoo_index",
    srcs = ["cuckoo_index.cc"],
    hdrs = ["cuckoo_index.h"],
    linkopts = ["-lm"],
    deps = [
        "//ppu/utils:exception",
        "//ppu/utils:int128",
        "@com_google_absl//absl/types:span",
    ],
)

ppu_cc_test(
    name = "cuckoo_index_test",
    srcs = ["cuckoo_index_test.cc"],
    deps = [
        ":cuckoo_index",
        "//ppu/crypto:symmetric_crypto",
    ],
)

ppu_cc_library(
    name = "kkrt_psi",
    srcs = ["kkrt_psi.cc"],
    hdrs = ["kkrt_psi.h"],
    deps = [
        ":cuckoo_index",
        ":serializable_cc_proto",
        ":throttle_control_link",
        ":utils",
        "//ppu/crypto:hash_util",
        "//ppu/crypto/ot:base_ot",
        "//ppu/crypto/ot:iknp_ot_extension",
        "//ppu/crypto/ot:kkrt_ot_extension",
        "//ppu/link",
        "//ppu/utils:rand",
        "@com_google_absl//absl/strings",
    ],
)

ppu_cc_test(
    name = "kkrt_psi_test",
    srcs = ["kkrt_psi_test.cc"],
    deps = [
        ":kkrt_psi",
        "//ppu/crypto:hash_util",
    ],
)

ppu_cc_library(
    name = "throttle_control_link",
    srcs = ["throttle_control_link.cc"],
    hdrs = ["throttle_control_link.h"],
    deps = [
        ":utils",
        "//ppu/link",
    ],
)

ppu_cc_test(
    name = "throttle_control_link_test",
    srcs = ["throttle_control_link_test.cc"],
    deps = [
        ":throttle_control_link",
    ],
)

ppu_cc_library(
    name = "ecdh_psi_mparty",
    srcs = ["ecdh_psi_mparty.cc"],
    hdrs = ["ecdh_psi_mparty.h"],
    deps = [
        ":ecdh_psi",
    ],
)

ppu_cc_test(
    name = "ecdh_psi_mparty_test",
    srcs = ["ecdh_psi_mparty_test.cc"],
    deps = [
        ":ecdh_psi_mparty",
    ],
)

ppu_cc_library(
    name = "ecdh_psi_3party",
    srcs = ["ecdh_psi_3party.cc"],
    hdrs = ["ecdh_psi_3party.h"],
    deps = [
        ":ecdh_psi_mparty",
    ],
)

ppu_cc_test(
    name = "ecdh_psi_3party_test",
    srcs = ["ecdh_psi_3party_test.cc"],
    deps = [
        ":ecdh_psi_3party",
    ],
)

ppu_cc_library(
    name = "utils",
    hdrs = ["utils.h"],
    deps = [
        ":serializable_cc_proto",
        "//ppu/core:buffer",
    ],
)

proto_library(
    name = "serializable_proto",
    srcs = ["serializable.proto"],
)

cc_proto_library(
    name = "serializable_cc_proto",
    deps = [":serializable_proto"],
)
