
# Copyright 2021 Ant Group Co., Ltd.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


load("//bazel:ppu.bzl", "ppu_cc_binary", "ppu_cc_library", "ppu_cc_test")
load("@rules_proto//proto:defs.bzl", "proto_library")
load("@rules_cc//cc:defs.bzl", "cc_proto_library")

package(default_visibility = ["//visibility:public"])

ppu_cc_library(
    name = "device",
    deps = [
        ":frame",
        ":io_accessor",
        ":processor",
    ],
)

ppu_cc_library(
    name = "frame",
    srcs = ["frame.cc"],
    hdrs = ["frame.h"],
    deps = [
        "//ppu/dialect:pphlo_dialect",
        "//ppu/hal:value",
        "//ppu/utils:exception",
        "@llvm-project//mlir:IR",
    ],
)

ppu_cc_library(
    name = "pphlo_executor",
    srcs = ["pphlo_executor.cc"],
    hdrs = ["pphlo_executor.h"],
    deps = [
        ":frame",
        "//ppu/dialect:pphlo_dialect",
        "//ppu/hal",
    ],
)

# processor
ppu_cc_library(
    name = "processor",
    srcs = ["processor.cc"],
    hdrs = ["processor.h"],
    deps = [
        ":frame",
        ":pphlo_executor",
        ":symbol_table",
        "//ppu:ppu_cc_proto",
        "//ppu/dialect:pphlo_dialect",
        "//ppu/utils:exception",
        "@llvm-project//mlir:Parser",
    ],
)

ppu_cc_test(
    name = "processor_test",
    srcs = ["processor_test.cc"],
    deps = [
        ":io_accessor",
        ":processor",
        ":processor_test_utils",
    ],
)

ppu_cc_library(
    name = "processor_test_utils",
    testonly = True,
    hdrs = ["processor_test_utils.h"],
    deps = [
        ":io_accessor",
        ":symbol_table",
        "//ppu:ppu_cc_proto",
        "//ppu/core:array_ref",
        "//ppu/mpc/util:simulate",
    ],
)

ppu_cc_library(
    name = "symbol_table",
    srcs = ["symbol_table.cc"],
    hdrs = ["symbol_table.h"],
    deps = [
        "//ppu/core:array_ref_util",
    ],
)

ppu_cc_library(
    name = "io_accessor",
    srcs = ["io_accessor.cc"],
    hdrs = ["io_accessor.h"],
    deps = [
        "//ppu:ppu_cc_proto",
        "//ppu/core:array_ref_util",
        "//ppu/core:encoding",
        "//ppu/core:type_util",
        "//ppu/hal:value",
        "//ppu/mpc:factory",
    ],
)

ppu_cc_test(
    name = "io_accessor_test",
    srcs = ["io_accessor_test.cc"],
    deps = [":io_accessor"],
)

proto_library(
    name = "colocated_io_proto",
    srcs = ["colocated_io.proto"],
    deps = [
        "//ppu:ppu_proto",
    ],
)

cc_proto_library(
    name = "colocated_io_cc_proto",
    deps = [":colocated_io_proto"],
)

ppu_cc_library(
    name = "colocated_io",
    srcs = ["colocated_io.cc"],
    hdrs = ["colocated_io.h"],
    deps = [
        ":colocated_io_cc_proto",
        ":io_accessor",
        ":processor",
        "//ppu/core:buffer",
        "//ppu/hal:value",
    ],
)

ppu_cc_binary(
    name = "processor_debug_runner",
    testonly = True,
    srcs = ["processor_debug_runner.cc"],
    deps = [
        ":processor",
        ":processor_test_utils",
        "@llvm-project//llvm:Support",
    ],
)
