
# Copyright 2021 Ant Group Co., Ltd.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


load("//bazel:ppu.bzl", "ppu_cc_library", "ppu_cc_test")

package(default_visibility = ["//visibility:public"])

ppu_cc_library(
    name = "core",
    deps = [
        ":array_ref",
        ":array_ref_util",
        ":buffer",
        ":encoding",
        ":shape_util",
        ":trace",
        ":type",
        ":type_util",
    ],
)

ppu_cc_library(
    name = "trace",
    srcs = ["trace.cc"],
    hdrs = ["trace.h"],
    deps = [
        ":type_util",
        "//ppu/utils:exception",
        "//ppu/utils:scope_guard",
    ],
)

ppu_cc_library(
    name = "type_util",
    srcs = ["type_util.cc"],
    hdrs = ["type_util.h"],
    deps = [
        "//ppu:ppu_cc_proto",
        "//ppu/utils:exception",
        "//ppu/utils:int128",
        "@com_google_absl//absl/types:span",
    ],
)

ppu_cc_library(
    name = "encoding",
    srcs = ["encoding.cc"],
    hdrs = ["encoding.h"],
    deps = [
        ":type_util",
        "//ppu:ppu_cc_proto",
        "//ppu/utils:exception",
    ],
)

ppu_cc_library(
    name = "shape_util",
    # srcs = ["shape_util.cc"],
    hdrs = ["shape_util.h"],
    deps = [
        ":type_util",
    ],
)

ppu_cc_test(
    name = "shape_util_test",
    srcs = ["shape_util_test.cc"],
    deps = [
        ":shape_util",
    ],
)

ppu_cc_library(
    name = "buffer",
    srcs = ["buffer.cc"],
    hdrs = ["buffer.h"],
    deps = [
        "//ppu/utils:exception",
    ],
)

ppu_cc_library(
    name = "type",
    srcs = ["type.cc"],
    hdrs = ["type.h"],
    deps = [
        ":type_util",
        "//ppu/utils:exception",
    ],
)

ppu_cc_test(
    name = "type_test",
    srcs = ["type_test.cc"],
    deps = [
        ":type",
    ],
)

ppu_cc_library(
    name = "array_ref",
    srcs = ["array_ref.cc"],
    hdrs = ["array_ref.h"],
    deps = [
        ":buffer",
        ":shape_util",
        ":type",
        ":vectorize",
        "//ppu/utils:exception",
    ],
)

ppu_cc_test(
    name = "array_ref_test",
    srcs = ["array_ref_test.cc"],
    deps = [
        ":array_ref",
    ],
)

ppu_cc_library(
    name = "array_ref_util",
    srcs = ["array_ref_util.cc"],
    hdrs = ["array_ref_util.h"],
    deps = [
        ":array_ref",
        "//ppu/crypto:pseudo_random_generator",
        "@com_github_xtensor_xtensor//:xtensor",
    ],
)

ppu_cc_test(
    name = "array_ref_util_test",
    srcs = ["array_ref_util_test.cc"],
    deps = [
        ":array_ref_util",
    ],
)

ppu_cc_library(
    name = "vectorize",
    hdrs = ["vectorize.h"],
    deps = [
        "//ppu/utils:exception",
        "@com_google_absl//absl/types:span",
    ],
)

ppu_cc_test(
    name = "vectorize_test",
    srcs = ["vectorize_test.cc"],
    deps = [
        ":vectorize",
    ],
)
