
# Copyright 2021 Ant Group Co., Ltd.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


load("//bazel:ppu.bzl", "ppu_cc_library", "ppu_cc_test")

package(default_visibility = ["//visibility:public"])

ppu_cc_library(
    name = "hal",
    hdrs = ["hal.h"],
    deps = [
        ":conv",
        ":debug",
        ":fxp",
        ":integer",
        ":io_ops",
        ":polymorphic",
        ":random",
        ":reduce",
        ":shape_ops",
        ":sort",
        ":type_cast",
        ":value",
    ],
)

ppu_cc_library(
    name = "value",
    srcs = ["value.cc"],
    hdrs = ["value.h"],
    deps = [
        "//ppu/core:array_ref",
        "//ppu/core:shape_util",
        "//ppu/utils:exception",
    ],
)

ppu_cc_test(
    name = "value_test",
    srcs = ["value_test.cc"],
    deps = [
        ":value",
    ],
)

ppu_cc_library(
    name = "context",
    srcs = ["context.cc"],
    hdrs = ["context.h"],
    deps = [
        ":value",  # FIXME: each module depends on value
        "//ppu/core",
        "//ppu/core:trace",
        "//ppu/link",
        "//ppu/mpc:factory",
    ],
)

ppu_cc_library(
    name = "public_intrinsic",
    srcs = ["public_intrinsic.cc"],
    hdrs = ["public_intrinsic.h"],
    deps = [
        ":context",
    ],
)

ppu_cc_library(
    name = "dispatch",
    hdrs = ["dispatch.h"],
    deps = [
        ":context",
    ],
)

ppu_cc_library(
    name = "prot_wrapper",
    srcs = ["prot_wrapper.cc"],
    hdrs = ["prot_wrapper.h"],
    deps = [
        ":context",
        ":permute_util",
    ],
)

ppu_cc_library(
    name = "ring",
    srcs = ["ring.cc"],
    hdrs = ["ring.h"],
    deps = [
        ":context",
        ":dispatch",
        ":prot_wrapper",
        ":shape_ops",
    ],
)

ppu_cc_library(
    name = "integer",
    srcs = ["integer.cc"],
    hdrs = ["integer.h"],
    deps = [
        ":prot_wrapper",
        ":ring",
    ],
)

ppu_cc_test(
    name = "integer_test",
    srcs = ["integer_test.cc"],
    deps = [
        ":integer",
        ":io_ops",
        ":test_util",
    ],
)

ppu_cc_library(
    name = "fxp",
    srcs = ["fxp.cc"],
    hdrs = ["fxp.h"],
    deps = [
        ":const_util",
        ":integer",
        ":io_ops",
        ":public_intrinsic",
        ":shape_ops",
        ":type_cast",
        "@com_google_absl//absl/numeric:bits",
    ],
)

ppu_cc_test(
    name = "fxp_test",
    srcs = ["fxp_test.cc"],
    deps = [
        ":fxp",
        ":test_util",
    ],
)

ppu_cc_library(
    name = "io_ops",
    srcs = ["io_ops.cc"],
    hdrs = ["io_ops.h"],
    deps = [
        ":context",
        ":prot_wrapper",
    ],
)

ppu_cc_library(
    name = "test_util",
    srcs = ["test_util.cc"],
    hdrs = ["test_util.h"],
    deps = [
        ":context",
        ":dispatch",
        ":io_ops",
        "@com_google_googletest//:gtest",
    ],
)

ppu_cc_library(
    name = "debug",
    srcs = ["debug.cc"],
    hdrs = ["debug.h"],
    deps = [
        ":test_util",
        ":type_cast",
        "//ppu/utils:exception",
    ],
)

ppu_cc_library(
    name = "polymorphic",
    srcs = ["polymorphic.cc"],
    hdrs = ["polymorphic.h"],
    deps = [
        ":fxp",
        ":integer",
        ":shape_ops",
        ":type_cast",
        "//ppu/core:vectorize",
        "//ppu/utils:exception",
    ],
)

ppu_cc_test(
    name = "polymorphic_test",
    srcs = ["polymorphic_test.cc"],
    deps = [
        ":context",
        ":polymorphic",
        ":test_util",
        "//ppu/mpc/util:linalg",
    ],
)

ppu_cc_test(
    name = "array_element_wise_test",
    srcs = ["array_element_wise_test.cc"],
    deps = [
        ":context",
        ":polymorphic",
        ":test_util",
    ],
)

ppu_cc_library(
    name = "type_cast",
    srcs = ["type_cast.cc"],
    hdrs = ["type_cast.h"],
    deps = [
        ":const_util",
        ":random",
        ":ring",
        "//ppu/utils:exception",
    ],
)

ppu_cc_test(
    name = "type_cast_test",
    srcs = ["type_cast_test.cc"],
    deps = [
        ":test_util",
        ":type_cast",
    ],
)

ppu_cc_library(
    name = "random",
    srcs = ["random.cc"],
    hdrs = ["random.h"],
    deps = [
        ":context",
        ":test_util",
        "//ppu/utils:exception",
    ],
)

ppu_cc_library(
    name = "shape_ops",
    srcs = ["shape_ops.cc"],
    hdrs = ["shape_ops.h"],
    deps = [
        ":context",
        "//ppu/core:vectorize",
        "//ppu/utils:exception",
    ],
)

ppu_cc_test(
    name = "shape_ops_test",
    srcs = ["shape_ops_test.cc"],
    deps = [
        ":shape_ops",
        ":test_util",
    ],
)

ppu_cc_library(
    name = "reduce",
    srcs = ["reduce.cc"],
    hdrs = ["reduce.h"],
    deps = [
        ":context",
        ":polymorphic",
        ":shape_ops",
        "//ppu/core:vectorize",
        "//ppu/utils:exception",
    ],
)

ppu_cc_test(
    name = "reduce_test",
    srcs = ["reduce_test.cc"],
    deps = [
        ":reduce",
        ":test_util",
    ],
)

ppu_cc_library(
    name = "const_util",
    srcs = ["const_util.cc"],
    hdrs = ["const_util.h"],
    deps = [
        ":io_ops",
        ":shape_ops",
        ":value",
    ],
)

ppu_cc_library(
    name = "conv",
    srcs = ["conv.cc"],
    hdrs = ["conv.h"],
    deps = [
        ":context",
        ":io_ops",
        ":polymorphic",
        ":reduce",
        ":shape_ops",
    ],
)

ppu_cc_test(
    name = "conv_test",
    srcs = ["conv_test.cc"],
    deps = [
        ":conv",
        ":test_util",
    ],
)

ppu_cc_library(
    name = "permute_util",
    srcs = ["permute_util.cc"],
    hdrs = ["permute_util.h"],
    deps = [
        ":context",
        ":shape_ops",
    ],
)

ppu_cc_test(
    name = "permute_util_test",
    srcs = ["permute_util_test.cc"],
    deps = [
        ":permute_util",
        ":test_util",
    ],
)

ppu_cc_library(
    name = "sort",
    srcs = ["sort.cc"],
    hdrs = ["sort.h"],
    deps = [
        ":context",
        ":permute_util",
    ],
)

ppu_cc_test(
    name = "sort_test",
    srcs = ["sort_test.cc"],
    deps = [
        ":sort",
        ":test_util",
    ],
)
