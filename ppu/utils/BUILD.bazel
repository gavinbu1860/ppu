
# Copyright 2021 Ant Group Co., Ltd.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


load("//bazel:ppu.bzl", "ppu_cc_binary", "ppu_cc_library", "ppu_cc_test")
load("@rules_proto//proto:defs.bzl", "proto_library")
load("@rules_cc//cc:defs.bzl", "cc_proto_library")

package(default_visibility = ["//visibility:public"])

ppu_cc_library(
    name = "hamming",
    hdrs = ["hamming.h"],
    deps = [
        ":exception",
        ":int128",
        "@com_google_absl//absl/numeric:bits",
        "@com_google_absl//absl/types:span",
    ],
)

ppu_cc_test(
    name = "hamming_test",
    srcs = ["hamming_test.cc"],
    deps = [
        ":hamming",
    ],
)

ppu_cc_library(
    name = "exception",
    srcs = [],
    hdrs = ["exception.h"],
    deps = [
        "@com_github_fmtlib_fmt//:fmtlib",
        "@com_google_absl//absl/debugging:stacktrace",
        "@com_google_absl//absl/debugging:symbolize",
        "@com_google_absl//absl/types:span",
    ],
)

ppu_cc_test(
    name = "exception_test",
    srcs = ["exception_test.cc"],
    deps = [
        ":exception",
    ],
)

ppu_cc_library(
    name = "scope_guard",
    hdrs = ["scope_guard.h"],
    deps = ["@com_google_absl//absl/cleanup"],
)

ppu_cc_test(
    name = "scope_guard_test",
    srcs = ["scope_guard_test.cc"],
    deps = [
        ":scope_guard",
    ],
)

ppu_cc_library(
    name = "int128",
    srcs = ["int128.cc"],
    hdrs = ["int128.h"],
    deps = [
        "@com_google_absl//absl/numeric:int128",
    ],
)

ppu_cc_test(
    name = "int128_test",
    srcs = ["int128_test.cc"],
    deps = [
        ":int128",
    ],
)

ppu_cc_library(
    name = "byte_container_view",
    srcs = ["byte_container_view_internal.h"],
    hdrs = ["byte_container_view.h"],
    linkopts = ["-lm"],
    deps = [
        ":exception",
        "@com_google_absl//absl/strings",
    ],
)

ppu_cc_test(
    name = "byte_container_view_test",
    srcs = [
        "byte_container_view_internal.h",
        "byte_container_view_test.cc",
    ],
    deps = [
        ":byte_container_view",
        "@com_google_absl//absl/strings",
    ],
)

ppu_cc_binary(
    name = "int128_bench",
    srcs = ["int128_bench.cc"],
    # By default we benchmark the BMI2 `mulx`. Comment `copts & defines` to test `mulq` instead.
    # NOTE BMI2 is enabled from Intel Haswell series, which also provides AVX2.
    copts = ["-march=native"],
    defines = ["PPU_ENABLE_BMI2"],
    linkopts = ["-lm"],
    deps = [
        ":int128",
        "@com_github_google_benchmark//:benchmark_main",
    ],
)

ppu_cc_library(
    name = "rand",
    hdrs = ["rand.h"],
    deps = [
        "//ppu/utils:int128",
    ],
)

ppu_cc_library(
    name = "thread_pool",
    srcs = ["thread_pool.cc"],
    hdrs = ["thread_pool.h"],
    deps = [
        ":exception",
    ],
)

ppu_cc_test(
    name = "thread_pool_test",
    srcs = ["thread_pool_test.cc"],
    deps = [
        ":thread_pool",
    ],
)

ppu_cc_library(
    name = "parallel",
    srcs = [
        "parallel_common.cc",
        "parallel_native.cc",
    ],
    hdrs = [
        "parallel.h",
        "parallel_native.h",
    ],
    visibility = ["//visibility:public"],
    deps = [
        ":exception",
        ":thread_pool",
    ],
)

ppu_cc_test(
    name = "parallel_test",
    srcs = ["parallel_test.cc"],
    deps = [
        ":parallel",
    ],
)

proto_library(
    name = "serializable_proto",
    srcs = ["serializable.proto"],
)

cc_proto_library(
    name = "serializable_cc_proto",
    deps = [":serializable_proto"],
)

ppu_cc_library(
    name = "serialize",
    srcs = ["serialize.cc"],
    hdrs = ["serialize.h"],
    deps = [
        ":int128",
        ":serializable_cc_proto",
        "//ppu/core:buffer",
    ],
)
